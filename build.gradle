apply plugin: "java"

version '1.0'

sourceSets.main.java.srcDirs = ["src"]

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }
}

java{
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v145'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: System.getenv("ANDROID_SDK_ROOT")
    gamePath = "C:\\Users\\${System.getenv("USERNAME")}\\Desktop\\Mindustry-CN-ARC-Desktop-30823.jar"
    modPath = "C:\\Users\\${System.getenv("USERNAME")}\\AppData\\Roaming\\Mindustry\\mods"

    android_ip = "192.168.1.8:5555"
    adbPath = "E:\\安装\\MuMuPlayer-12.0\\shell\\adb.exe"
    gamePackage = "io.anuke.mindustry.arc2"
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        options.encoding = "UTF-8"
        options.fork = true
        options.forkOptions.jvmArgs.addAll([
                "--add-opens", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
                "--add-opens", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
                "--add-opens", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
                "--add-opens", "jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
                "--add-opens", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
                "--add-opens", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
        ])

        options.compilerArgs.addAll(['--release', '8'])
    }
}

dependencies{
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
    compileOnly "com.github.Anuken.Mindustry:core:$mindustryVersion"

    annotationProcessor "com.github.Anuken:jabel:$jabelVersion"
}

//force arc version
configurations.all{
    resolutionStrategy.eachDependency { details ->
        if(details.requested.group == 'com.github.Anuken.Arc'){
            details.useVersion "$mindustryVersion"
        }
    }
}

task jarAndroid{
    dependsOn "jar"

    doLast{
        if(!sdkRoot || !new File(sdkRoot).exists()) throw new GradleException("No valid Android SDK found. Ensure that ANDROID_HOME is set to your Android SDK directory.")

        def platformRoot = new File("$sdkRoot/platforms/").listFiles().sort().reverse().find{ f -> new File(f, "android.jar").exists()}

        if(!platformRoot) throw new GradleException("No android.jar found. Ensure that you have an Android platform installed.")

        //collect dependencies needed for desugaring
        def dependencies = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File(platformRoot, "android.jar")]).collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        "F:\\android-sdk-windows\\build-tools\\29.0.3\\d8.bat $dependencies --min-api 14 --output ${project.archivesBaseName}Android.jar ${project.archivesBaseName}Desktop.jar"
            .execute(null, new File("$buildDir/libs")).waitForProcessOutput(System.out, System.err)
    }
}

jar{
    archiveFileName = "${base.archivesBaseName}Desktop.jar"

    from{
        configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }
    }

    from(rootDir){
        include "mod.hjson"
    }

    from("assets/"){
        include "**"
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jar
    archiveFileName = "${base.archivesBaseName}.jar"

    from{ [zipTree("$buildDir/libs/${project.archivesBaseName}Desktop.jar"), zipTree("$buildDir/libs/${project.archivesBaseName}Android.jar")] }

    doLast{
        delete{
            delete "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            delete "$buildDir/libs/${project.archivesBaseName}Android.jar"
        }
    }
}

task testDesktopMod {
    dependsOn jar
    doLast {
        delete{
            delete "${modPath}/${project.archivesBaseName}Desktop.jar"
        }
        copy {
            from "$buildDir/libs/${project.archivesBaseName}Desktop.jar"
            into modPath
        }
        def commandLine = "cmd /c start cmd.exe /c java -jar ${gamePath}"
        commandLine.execute()
    }
}

task testAndroidMod {
    dependsOn jarAndroid

    doLast {
        exec {
            commandLine 'cmd', "/c",
                    "${adbPath} connect ${android_ip} &&" +
                    "${adbPath} shell rm /sdcard/Android/data/${gamePackage}/files/mods/${project.archivesBaseName}Android.jar &&" +
                    "${adbPath} push $buildDir/libs/${project.archivesBaseName}Android.jar /sdcard/Android/data/${gamePackage}/files/mods &&" +
                    "${adbPath} shell am start ${gamePackage}/mindustry.android.AndroidLauncher"
        }
    }
}
